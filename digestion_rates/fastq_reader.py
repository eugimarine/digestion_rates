# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_FastQ.ipynb.

# %% auto 0
__all__ = ['extract_umi_cb', 'extract_dictionary', 'SequencesCells', 'FastQ', 'concatenate_tables']

# %% ../01_FastQ.ipynb 3
import numpy as np
import pandas as pd
import gzip
from Bio import SeqIO
from Bio.SeqUtils.CheckSum import seguid

# %% ../01_FastQ.ipynb 6
def extract_umi_cb(nm):
    nm = nm.split(' ')[0]
    cb, umi = nm.split('_')[1:3]
    return umi, cb

# %% ../01_FastQ.ipynb 10
def extract_dictionary(path, plate_name):
    tracked_ids = []
    tracked_seqs = []
    fastq_dict = {}
    with gzip.open(path, "rt") as handle:
        for record in SeqIO.parse(handle, "fastq"):
            umi, cb = extract_umi_cb(str(record.id))
            sequence = str(record.seq)
            uniq_id = (umi, cb, sequence)
            if (uniq_id in tracked_ids):
                continue
            tracked_ids.append(uniq_id)
            cb = plate_name + '_' + cb 
            if cb in fastq_dict.keys():
                if sequence in fastq_dict[cb].keys():                    
                    fastq_dict[cb][sequence] += 1
                else:
                    fastq_dict[cb][sequence] = 1
            else:
                fastq_dict[cb] = {sequence:1}
    return fastq_dict


# %% ../01_FastQ.ipynb 13
class SequencesCells():
    def __init__(self, df, plate):
        self.table = df
        self.plates = plate if isinstance(plate, list) else [plate]
    def join_plate(self, sequences_cells):
        addtable = sequences_cells.table
        plates_to_add = [p for p in sequences_cells.plates if p not in self.plates]
        if len(plates_to_add) == 0:
            return self
        select_cells = np.array([[plate in name_cell for name_cell in addtable.columns]
                                    for plate in plates_to_add]).sum(axis=0).astype(bool)
        other = addtable.loc[:,select_cells]
        self.table = pd.concat([self.table,other], axis=1).dropna()
        self.plates = self.plates + plates_to_add
        return self
    def select_plate(self, plate):
        df = self.table.loc[:, [col for col in plates.table.columns if plate in col]]
        return SequencesCells(df, plate)

# %% ../01_FastQ.ipynb 14
class FastQ():
    def __init__(self, fastq_file, plate_name=None):
        self.fastq_file = fastq_file
        self.plate_name = plate_name
        
    def parse_file(self):
        if self.plate_name is None:
            self.plate_name = '-'.join(self.fastq_file.split('_')[0].split('-')[1:])
            
            
        fastq = extract_dictionary(self.fastq_file, self.plate_name)
        df_fastq = pd.DataFrame(fastq).fillna(0)
        return SequencesCells(df_fastq, self.plate_name)

            

# %% ../01_FastQ.ipynb 15
def concatenate_tables(list_of_seqcells):
    cat_plates = [pl for t in list_of_seqcells for pl in t.plates ]
    if len(set(cat_plates)) != len(cat_plates):
        raise ValueError('Repeated plates in the passed list')
    cat_tables = [t.table for t in list_of_seqcells ]
    new_table = pd.concat(cat_tables, axis=1).dropna()
    return SequencesCells(new_table, cat_plates)
    
