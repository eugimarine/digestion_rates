# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_FastQ.ipynb.

# %% auto 0
__all__ = ['fastq_dict', 'extract_umi_cb', 'extract_dictionary', 'count_unique_sequences', 'FastQ']

# %% ../01_FastQ.ipynb 3
import numpy as np
import pandas as pd
import gzip

# %% ../01_FastQ.ipynb 5
def extract_umi_cb(nm):
    nm = nm.split(' ')[0]
    cb, umi = nm.split('_')[1:3]
    return cb, umi

# %% ../01_FastQ.ipynb 7
def extract_dictionary(path):
    fastq_dict = {}
    with open(path, 'r') as f:
        content = f.readlines()
        for i, line in enumerate(content):
            index_seq = i % 4
            line = line.strip()
            if index_seq == 0:
                sequence = content[i+1].strip()
                cb, umi = extract_umi_cb(line)
                i += 0
                if cb in fastq_dict.keys():
                    if sequence in fastq_dict[cb].keys():                    
                        fastq_dict[cb][sequence].append(umi)
                    else:
                        fastq_dict[cb][sequence] = [umi]

                else:
                    fastq_dict[cb] = {sequence:[umi]}
    return fastq_dict
fastq_dict = extract_dictionary('./test.fastq')
assert list(pd.DataFrame(fastq_dict).columns) == ['NTGCB', 'GTNCB']
assert list(pd.DataFrame(fastq_dict).index) == ['CTCTGA', 'CTCTGAGGG']

# %% ../01_FastQ.ipynb 9
def count_unique_sequences(dz):    
    df = pd.DataFrame(dz)
    df = df.applymap(lambda x: len(set(x)) if isinstance(x,list) else 0)
    return df

# %% ../01_FastQ.ipynb 12
class FastQ():
    def __init__(self, fastq_file):
        self.fastq_file = fastq_file
        
    def parse_file(self):
        fastq = extract_dictionary(self.fastq_file)
        df_fastq = count_unique_sequences(fastq)
        return df_fastq

            
