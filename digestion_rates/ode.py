# AUTOGENERATED! DO NOT EDIT! File to edit: ../04_ODEmodel.ipynb.

# %% auto 0
__all__ = ['initialize_params', 'k_matrix', 'ode_solver', 'plot_fitted', 'residual']

# %% ../04_ODEmodel.ipynb 3
def initialize_params(data, initial_guess, initial_guess_bounds=[0.0001, 1], vary_initial_conditions=False):
    initial_conditions = list(data[0,:])
    params = Parameters()
    for nm,i in enumerate(initial_conditions):
        params.add('x'+str(nm + 1)+'0', value=i, vary=vary_initial_conditions)
    for nm, k in enumerate(initial_guess):
        params.add('k'+str(nm), value=k, min=initial_guess_bounds[0], max=initial_guess_bounds[1])
    return params

# %% ../04_ODEmodel.ipynb 5
def k_matrix(params):
    params_k_list = [k for k in params.keys() if 'k' in k]
    m = len(params_k_list)
    n = m + 1

    k = np.eye(n,m, k=-1) - np.eye(n,m)
    k_values = [params[k] for k in params_k_list]
    return k_values * k

# %% ../04_ODEmodel.ipynb 7
def _master_equations(y, t, paras):
    """
    Your system of differential equations
    # f0 = -k0 * x1
    # f1 = k0 * x1 - k1 * x2
    # ...
    # fn-1 = kn-2 * x2 - kn-1 * x3
    # fn = kn-1 * xn-1
    fn need to be solve using odeint
    """

    rates = k_matrix(paras)
    dydt = rates.dot(y[:-1])
    return dydt

# %% ../04_ODEmodel.ipynb 9
def ode_solver(t, x0, paras):
    """
    Solution to the ODE x'(t) = f(t,x,k) with initial condition x(0) = x0
    """
    x = odeint(_master_equations, x0, t, args=(paras,))
    return x

# %% ../04_ODEmodel.ipynb 10
def plot_fitted(t_fit, data_fitted, measured, model_result):
    t_measured = measured[:,0]
    x_measured =  measured[:,1:]
    # plot fitted data
    plt.plot(t_fit, data_fitted, '-', linewidth=2, color='red', label='fitted data')
    for i, xi_measured in enumerate(x_measured.T):
        plt.scatter( t_measured, xi_measured, marker='o', color='b', label= 'X' + str(i))
    plt.legend()
    plt.xlim([0, np.max(t_measured)])
    plt.ylim([0, 1.1 * np.max(data_fitted)])
    # display fitted statistics
    report_fit(model_result)

    plt.show()

# %% ../04_ODEmodel.ipynb 11
def residual(paras, t, data):

    """
    compute the residual between actual data and fitted data
    """
    x0 = [paras[x].value for x in paras.keys() if 'x' in x]
    # x0 = paras['x10'].value, paras['x20'].value, paras['x30'].value, paras['x40'].value
    model = ode_solver(t, x0, paras)

    return ((model - data)).ravel()


# %% ../04_ODEmodel.ipynb 19
# | export 

# %% ../04_ODEmodel.ipynb 20
# | export 
